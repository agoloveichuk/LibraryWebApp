// <auto-generated />
using System;
using LibraryWebApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryWebApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230604183009_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("AuthorId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            DateOfBirth = new DateTime(1965, 7, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "J.K. Rowling"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            DateOfBirth = new DateTime(1890, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Agatha Christie"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            DateOfBirth = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Jane Austen"
                        });
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BookId");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1200)
                        .HasColumnType("character varying(1200)");

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "The Great Gatsby is a novel...",
                            Cover = "https://example.com/great-gatsby-cover.jpg",
                            Genre = 5,
                            Rating = 8.5m,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Content = "To Kill a Mockingbird is a novel...",
                            Cover = "https://example.com/to-kill-a-mockingbird-cover.jpg",
                            Genre = 5,
                            Rating = 9.2m,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Content = "1984 is a dystopian novel...",
                            Cover = "https://example.com/1984-cover.jpg",
                            Genre = 5,
                            Rating = 9.0m,
                            Title = "1984"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            AuthorId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Content = "The Hobbit is a fantasy novel...",
                            Cover = "https://example.com/the-hobbit-cover.jpg",
                            Genre = 5,
                            Rating = 8.8m,
                            Title = "The Hobbit"
                        });
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ReviewId");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Reviewer")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Message = "This book was amazing!",
                            Reviewer = "John Doe",
                            Score = 9.5m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Message = "Highly recommended!",
                            Reviewer = "Jane Smith",
                            Score = 8.8m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Message = "Great read!",
                            Reviewer = "David Johnson",
                            Score = 9.0m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Message = "Enjoyed every page!",
                            Reviewer = "Emily Brown",
                            Score = 9.2m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Message = "Well-written and captivating!",
                            Reviewer = "Michael Wilson",
                            Score = 9.4m
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            BookId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Message = "One of my favorites!",
                            Reviewer = "Sarah Davis",
                            Score = 9.7m
                        });
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Book", b =>
                {
                    b.HasOne("LibraryWebApp.Domain.Entities.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Review", b =>
                {
                    b.HasOne("LibraryWebApp.Domain.Entities.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebApp.Domain.Entities.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
